/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã store
 */

export default class StoreTester {
  constructor(store) {
    this.store = store;
  }

  /**
   * –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async testDataLoading() {
    console.log('=== –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ===');
    
    const tests = [
      { name: '–í–∞–ª—é—Ç—ã', action: 'loadCurrencies', getter: 'currencies' },
      { name: '–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è', action: 'loadUnits', getter: 'units' },
      { name: '–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤', action: 'loadOrderStatuses', getter: 'orderStatuses' },
      { name: '–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤', action: 'loadProjectStatuses', getter: 'projectStatuses' },
      { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', action: 'loadTransactionCategories', getter: 'transactionCategories' },
      { name: '–°—Ç–∞—Ç—É—Å—ã —Ç–æ–≤–∞—Ä–æ–≤', action: 'loadProductStatuses', getter: 'productStatuses' }
    ];

    for (const test of tests) {
      try {
        console.log(`\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º ${test.name} ---`);
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.store.commit(`SET_${test.getter.toUpperCase()}`, []);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const startTime = performance.now();
        await this.store.dispatch(test.action);
        const endTime = performance.now();
        
        const data = this.store.getters[test.getter];
        console.log(`‚úÖ ${test.name}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ ${Math.round(endTime - startTime)}–º—Å`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = test.action.replace('load', '').toLowerCase() + '_cache';
        const cached = localStorage.getItem(cacheKey);
        console.log(`üì¶ –ö—ç—à ${test.name}: ${cached ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${test.name}:`, error);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async testParallelLoading() {
    console.log('\n=== –¢–ï–°–¢ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò ===');
    
    const startTime = performance.now();
    
    try {
      await Promise.all([
        this.store.dispatch('loadCurrencies'),
        this.store.dispatch('loadUnits'),
        this.store.dispatch('loadOrderStatuses'),
        this.store.dispatch('loadProjectStatuses'),
        this.store.dispatch('loadTransactionCategories'),
        this.store.dispatch('loadProductStatuses')
      ]);
      
      const endTime = performance.now();
      console.log(`‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${Math.round(endTime - startTime)}–º—Å`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ –∫—ç—à–∞)
   */
  async testCacheLoading() {
    console.log('\n=== –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ò–ó –ö–≠–®–ê ===');
    
    const tests = [
      { name: '–í–∞–ª—é—Ç—ã', action: 'loadCurrencies' },
      { name: '–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è', action: 'loadUnits' },
      { name: '–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤', action: 'loadOrderStatuses' }
    ];

    for (const test of tests) {
      try {
        console.log(`\n--- –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ${test.name} ---`);
        
        const startTime = performance.now();
        await this.store.dispatch(test.action);
        const endTime = performance.now();
        
        console.log(`‚ö° ${test.name}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ ${Math.round(endTime - startTime)}–º—Å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ - –∏–∑ –∫—ç—à–∞)`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ${test.name}:`, error);
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è loading flags
   */
  testLoadingFlags() {
    console.log('\n=== –¢–ï–°–¢ –°–û–°–¢–û–Ø–ù–ò–Ø LOADING FLAGS ===');
    
    const flags = this.store.state.loadingFlags;
    const activeFlags = Object.entries(flags).filter(([key, value]) => value);
    
    if (activeFlags.length === 0) {
      console.log('‚úÖ –í—Å–µ —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏:', activeFlags.map(([key]) => key).join(', '));
    }
  }

  /**
   * –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
   */
  testCacheSize() {
    console.log('\n=== –¢–ï–°–¢ –†–ê–ó–ú–ï–†–ê –ö–≠–®–ê ===');
    
    let totalSize = 0;
    const cacheKeys = Object.keys(localStorage).filter(key => 
      key.includes('_cache') || key.includes('_timestamp')
    );
    
    cacheKeys.forEach(key => {
      const size = localStorage.getItem(key).length;
      totalSize += size;
    });
    
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: ${cacheKeys.length}`);
    console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${Math.round(totalSize / 1024 * 100) / 100}KB`);
    
    if (totalSize > 5 * 1024 * 1024) { // 5MB
      console.log('‚ö†Ô∏è –ö—ç—à –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5MB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞');
    } else {
      console.log('‚úÖ –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ –Ω–æ—Ä–º–µ');
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í STORE');
    console.log('='.repeat(50));
    
    await this.testDataLoading();
    await this.testParallelLoading();
    await this.testCacheLoading();
    this.testLoadingFlags();
    this.testCacheSize();
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´');
  }
}
